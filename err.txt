Kubespray와 Docker Ansible을 이용한 Kubernetes 클러스터 설치 가이드
Kubespray는 Ansible 플레이북을 사용하여 Kubernetes 클러스터를 배포하고 관리하는 오픈소스 도구입니다. 다양한 클라우드 환경 및 온프레미스 환경에서 Kubernetes를 유연하게 설치할 수 있도록 지원합니다. 이 가이드에서는 Docker 컨테이너 버전의 Ansible을 사용하여 Kubespray로 Kubernetes 클러스터를 설치하는 방법을 안내합니다.
1. 사전 준비 사항
Kubernetes 클러스터를 설치하기 전에 다음 사항들을 준비해야 합니다.
 * 서버: Kubernetes 마스터 및 워커 노드로 사용할 서버들을 준비합니다. 각 서버는 다음 요구 사항을 충족하는 것이 좋습니다.
   * 지원되는 운영체제 (예: Ubuntu, CentOS 등 Kubespray에서 지원하는 OS)
   * 최소 2 CPU, 4GB RAM (실제 운영 환경에서는 더 높은 사양 권장)
   * 각 노드 간 네트워크 연결 및 인터넷 연결
   * 각 노드에 SSH 접속 가능 (Key-based authentication 권장)
   * sudo 권한을 가진 사용자 계정
 * Ansible 실행 환경: Ansible 명령을 실행할 머신이 필요합니다. 이 가이드에서는 Docker 컨테이너를 사용합니다.
 * Python: Kubespray는 Python 기반이므로, Ansible을 실행하는 환경에 Python이 설치되어 있어야 합니다 (Docker 컨테이너 사용 시 이미지에 포함).
 * SSH 키: Ansible 컨트롤 노드에서 각 Kubernetes 노드로 암호 없이 SSH 접속이 가능하도록 SSH 키를 설정합니다.
2. Ansible Docker 컨테이너 환경 준비
Docker Hub에서 공식 Ansible 이미지를 사용하거나, Kubespray에 필요한 종속성이 포함된 이미지를 직접 빌드할 수 있습니다. Kubespray 공식 문서에서는 quay.io/kubespray/kubespray 이미지를 사용하는 것을 권장하기도 합니다.
Kubespray Docker 이미지 사용 방법:
일반적으로 Kubespray 저장소 내에 Dockerfile이 포함되어 있어, 이를 기반으로 이미지를 빌드하거나 이미 빌드된 이미지를 사용할 수 있습니다.
 * Kubespray 저장소 복제:
   git clone https://github.com/kubernetes-sigs/kubespray.git
cd kubespray

 * Docker 이미지 가져오기 또는 빌드:
   최신 Kubespray 릴리스 버전에 맞는 Docker 이미지를 사용하거나 직접 빌드합니다. 예를 들어, quay.io/kubespray/kubespray:<버전> 형태의 이미지를 사용할 수 있습니다.
 * Docker 컨테이너 실행:
   Ansible 플레이북을 실행할 Docker 컨테이너를 실행합니다. 이때, 로컬의 Kubespray 설정 파일, SSH 키 등을 컨테이너 내부로 마운트해야 합니다.
   docker run --rm -it \
  -v $(pwd)/inventory/mycluster:/inventory \
  -v $(pwd)/contrib/ansible-docker/ansible.cfg:/ansible.cfg \
  -v ~/.ssh/id_rsa:/root/.ssh/id_rsa \
  quay.io/kubespray/kubespray:<KUBESPRAY_VERSION> bash

   * $(pwd)/inventory/mycluster는 사용자가 생성할 인벤토리 파일 경로입니다.
   * ~/.ssh/id_rsa는 Ansible 컨트롤 노드에서 Kubernetes 노드로 접속하기 위한 SSH 개인 키 경로입니다. 실제 환경에 맞게 수정해야 합니다.
   * <KUBESPRAY_VERSION>에는 사용하려는 Kubespray 버전을 명시합니다. (예: v2.25.0)
   컨테이너 실행 후, 컨테이너 내부에서 이후 단계를 진행합니다.
3. Kubespray 설정
 * 인벤토리 파일 생성 및 구성:
   Kubespray는 Ansible 인벤토리 파일을 사용하여 클러스터 노드 정보 및 설정을 정의합니다.
   * 샘플 인벤토리 복사:
     컨테이너 내부에서 다음 명령어를 실행합니다. 만약 로컬에서 작업 후 컨테이너로 복사할 예정이라면 로컬에서 진행합니다.
     # 컨테이너 내부
cp -rfp /kubespray/inventory/sample /inventory/mycluster

     또는 로컬에서 작업하는 경우:
     cp -rfp inventory/sample inventory/mycluster

   * 인벤토리 파일 수정 (inventory/mycluster/inventory.ini):
     inventory.ini 파일을 열어 클러스터 노드의 IP 주소 및 호스트 이름을 설정합니다.
     [all]
master1 ansible_host=192.168.1.10 ip=192.168.1.10
node1 ansible_host=192.168.1.11 ip=192.168.1.11
node2 ansible_host=192.168.1.12 ip=192.168.1.12

[kube_control_plane]
master1

[etcd]
master1

[kube_node]
node1
node2

[calico_rr]

[k8s_cluster:children]
kube_control_plane
kube_node
calico_rr

     * ansible_host: Ansible이 접속할 노드의 IP 주소 또는 호스트 이름입니다.
     * ip: 노드의 내부 IP 주소입니다.
     * 필요에 따라 etcd, kube_control_plane, kube_node 그룹에 노드를 할당합니다.
   * 클러스터 변수 설정 (선택 사항):
     inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml 파일을 수정하여 Kubernetes 버전, 네트워크 플러그인 (예: Calico, Flannel), DNS 설정 등 다양한 클러스터 설정을 변경할 수 있습니다.
     예를 들어, 특정 Kubernetes 버전을 설치하려면:
     kube_version: v1.28.3

     네트워크 플러그인을 Calico로 설정하려면 (기본값 중 하나):
     kube_network_plugin: calico

4. Kubernetes 클러스터 배포
Docker 컨테이너 내부에서 Ansible 플레이북을 실행하여 Kubernetes 클러스터를 배포합니다.
 * 종속성 설치 (필요한 경우):
   Kubespray는 특정 Python 라이브러리를 필요로 합니다. 일반적으로 Kubespray Docker 이미지에는 필요한 종속성이 포함되어 있지만, 만약 직접 구성한 환경이라면 설치해야 할 수 있습니다.
   # 컨테이너 내부 (필요시)
pip install -r /kubespray/requirements.txt

 * Ansible 플레이북 실행:
   다음 명령어를 사용하여 클러스터 배포를 시작합니다.
   # 컨테이너 내부
ansible-playbook -i /inventory/mycluster/inventory.ini --become --become-user=root /kubespray/cluster.yml

   * -i /inventory/mycluster/inventory.ini: 사용할 인벤토리 파일을 지정합니다.
   * --become --become-user=root: 권한 상승(sudo)을 사용하도록 설정합니다. 일부 시스템에서는 --become-method=su 와 같은 추가 옵션이 필요할 수 있습니다.
   * /kubespray/cluster.yml: Kubespray의 메인 플레이북 파일입니다.
   설치 과정은 클러스터의 크기와 네트워크 속도에 따라 몇 분에서 몇 시간까지 소요될 수 있습니다.
5. 설치 확인
클러스터 배포가 완료되면, 마스터 노드에서 kubectl 명령어를 사용하여 클러스터 상태를 확인할 수 있습니다.
 * 마스터 노드 접속:
   설치가 완료된 마스터 노드에 SSH로 접속합니다.
 * kubectl 설정:
   일반적으로 Kubespray는 마스터 노드의 관리자 계정 홈 디렉터리 아래 .kube/config 파일을 생성합니다.
   mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

 * 클러스터 상태 확인:
   kubectl get nodes
kubectl get pods --all-namespaces

   모든 노드가 Ready 상태로 표시되고, 시스템 파드들이 정상적으로 실행 중인지 확인합니다.
6. 클러스터 관리
Kubespray는 클러스터 설치 외에도 다음과 같은 관리 작업을 지원합니다.
 * 노드 추가/제거: 인벤토리 파일을 수정한 후 scale.yml 플레이북을 실행합니다.
 * 클러스터 업그레이드: upgrade-cluster.yml 플레이북을 사용합니다.
 * 클러스터 초기화/삭제: reset.yml 플레이북을 사용합니다. (주의: 모든 데이터가 삭제됩니다.)
각 작업에 대한 자세한 내용은 Kubespray 공식 문서를 참조하십시오.
7. 추가 정보 및 팁
 * 공식 문서 참조: 항상 최신 정보와 상세한 설정 옵션은 Kubespray 공식 GitHub 저장소 및 관련 문서를 참조하는 것이 좋습니다.
 * 문제 해결: 설치 중 문제가 발생하면 Ansible 출력 로그를 자세히 확인하고, Kubespray GitHub 이슈 트래커에서 유사한 문제를 검색해 보십시오.
 * 방화벽 설정: 각 노드의 방화벽에서 Kubernetes 구성 요소들이 사용하는 포트(예: API 서버 포트, etcd 포트, 노드 포트 등)가 열려 있는지 확인해야 합니다. Kubespray는 종종 iptables 규칙을 자동으로 설정하지만, 별도의 방화벽 소프트웨어를 사용하는 경우 수동 설정이 필요할 수 있습니다.
 * SELinux/AppArmor: SELinux 또는 AppArmor가 활성화된 경우, Kubespray 실행에 영향을 줄 수 있습니다. 필요에 따라 설정을 조정하거나 일시적으로 비활성화하는 것을 고려할 수 있습니다 (보안 상 권장되지는 않음).
이 가이드가 Kubespray와 Docker Ansible을 사용하여 Kubernetes 클러스터를 성공적으로 구축하는 데 도움이 되기를 바랍니다. 환경에 따라 세부 설정이 달라질 수 있으므로, 공식 문서를 함께 참고하며 진행하는 것이 중요합니다.
